/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AppsRouteImport } from './routes/apps.route'
import { Route as AppsIndexImport } from './routes/apps.index'
import { Route as AppsAppIdImport } from './routes/apps.$appId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppsRouteRoute = AppsRouteImport.update({
  id: '/apps',
  path: '/apps',
  getParentRoute: () => rootRoute,
} as any)

const AppsIndexRoute = AppsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppsRouteRoute,
} as any)

const AppsAppIdRoute = AppsAppIdImport.update({
  id: '/$appId',
  path: '/$appId',
  getParentRoute: () => AppsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/apps': {
      id: '/apps'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AppsRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/apps/$appId': {
      id: '/apps/$appId'
      path: '/$appId'
      fullPath: '/apps/$appId'
      preLoaderRoute: typeof AppsAppIdImport
      parentRoute: typeof AppsRouteImport
    }
    '/apps/': {
      id: '/apps/'
      path: '/'
      fullPath: '/apps/'
      preLoaderRoute: typeof AppsIndexImport
      parentRoute: typeof AppsRouteImport
    }
  }
}

// Create and export the route tree

interface AppsRouteRouteChildren {
  AppsAppIdRoute: typeof AppsAppIdRoute
  AppsIndexRoute: typeof AppsIndexRoute
}

const AppsRouteRouteChildren: AppsRouteRouteChildren = {
  AppsAppIdRoute: AppsAppIdRoute,
  AppsIndexRoute: AppsIndexRoute,
}

const AppsRouteRouteWithChildren = AppsRouteRoute._addFileChildren(
  AppsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/apps': typeof AppsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/apps/$appId': typeof AppsAppIdRoute
  '/apps/': typeof AppsIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/apps/$appId': typeof AppsAppIdRoute
  '/apps': typeof AppsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/apps': typeof AppsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/apps/$appId': typeof AppsAppIdRoute
  '/apps/': typeof AppsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/apps' | '/login' | '/apps/$appId' | '/apps/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/apps/$appId' | '/apps'
  id: '__root__' | '/apps' | '/login' | '/apps/$appId' | '/apps/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppsRouteRoute: typeof AppsRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppsRouteRoute: AppsRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/apps",
        "/login"
      ]
    },
    "/apps": {
      "filePath": "apps.route.tsx",
      "children": [
        "/apps/$appId",
        "/apps/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/apps/$appId": {
      "filePath": "apps.$appId.tsx",
      "parent": "/apps"
    },
    "/apps/": {
      "filePath": "apps.index.tsx",
      "parent": "/apps"
    }
  }
}
ROUTE_MANIFEST_END */
